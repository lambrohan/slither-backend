// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TxnType {
  DEPOSIT
  EARNING
  STAKE
  WITHDRAW
}

enum FoodType {
  RED
  BLUE
  GREEN
  COIN
  ORANGE
}

model User {
  id             String        @id @default(uuid())
  public_address String        @unique
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  is_admin       Boolean       @default(false)
  wallet         Wallet?
  transactions   Transaction[]
  game_sessions  GameSession[]
}

model Wallet {
  id      String @id @default(uuid())
  amount  BigInt @default(0)
  user    User   @relation(fields: [user_id], references: [id])
  user_id String @unique
}

model Transaction {
  id         String   @id @default(uuid())
  type       TxnType
  hash       String?
  deposit_id String?
  amount     BigInt   @default(0)
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String
  session_id String?
  created_at DateTime @default(now())

  @@unique([hash, deposit_id, session_id])
}

model GameSession {
  id            String    @id @default(uuid())
  started_at    DateTime  @default(now())
  finished_at   DateTime?
  tokens_earned BigInt    @default(0)
  tokens_staked BigInt
  kills         Int       @default(0)
  won           Boolean   @default(false)
  user          User      @relation(fields: [user_id], references: [id])
  user_id       String
  room          GameRoom  @relation(fields: [room_id], references: [id])
  room_id       String
  snake_length  Int       @default(0)
  rank          Int       @default(0)
  nickname      String?
}

model GameRoom {
  id                  String         @id @default(uuid())
  min_usd_to_join     Float
  max_usd_to_join     Float
  created_at          DateTime       @default(now())
  name                String         @unique()
  variable_stake      Boolean        @default(false)
  game_sessions       GameSession[]
  max_players         Int            @default(0)
  tokens              BigInt         @default(0)
  tokens_per_instance BigInt         @default(0)
  instances           RoomInstance[]
  min_minutes_to_win  Int            @default(10)
  min_kills_to_win    Int            @default(3)
}

model Food {
  id    String   @id @default(uuid())
  type  FoodType @unique
  value Int
}

model RoomInstance {
  id               String    @id @default(uuid())
  room             GameRoom  @relation(fields: [room_id], references: [id])
  room_id          String
  created_at       DateTime  @default(now())
  destroyed_at     DateTime?
  tokens           BigInt
  colyseus_room_id String    @unique
}
